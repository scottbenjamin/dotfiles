// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// For next release
// include "binds.kdl"

spawn-at-startup "/usr/lib/hyprpolkitagent/hyprpolkitagent"
spawn-at-startup "waybar"
spawn-at-startup "mako"
spawn-at-startup ".local/bin/set-gammastep.sh"
spawn-at-startup "nm-applet --indicator"
spawn-at-startup "swaybg" "-o" "DP-1" "-i" "/home/scott/.config/themes/wallpapers/pine-island-under-a-billion-stars-ec-2560x1440.jpg" "-m" "fit" 
spawn-at-startup "swaybg" "-o" "DP-2" "-i" "/home/scott/.config/themes/wallpapers/pine-island-under-a-billion-stars-ec-1440x2560.jpg" "-m" "fit" 
spawn-sh-at-startup "swayidle -w timeout 600 'niri msg action power-off-monitors' timeout 300 'swaylock -f -c 000000' before-sleep 'swaylock -f -c 000000'"
spawn-at-startup "udiskie" "--smart-tray"
spawn-at-startup "1password" "--silent"



hotkey-overlay {
    skip-at-startup
}

xwayland-satellite {}
clipboard {}

environment {
    DISPLAY ":0"
 
    AMD_VULKAN_ICD "RADV"
    ELECTRON_OZONE_PLATFORM_HINT "auto"
    FSR4_UPGRADE "1" 
    GDK_BACKEND "wayland,x11,*"
    GTK_THEME "Nordic:dark"
    HYPRCURSOR_SIZE "24"
    MESA_SHADER_CACHE_MAX_SIZE "30G"
    MOZ_ENABLE_WAYLAND "1"
    OZONE_PLATFORM "wayland"
    PROTON_ENABLE_WAYLAND "1"
    PROTON_FSR4_RDNA3_UPGRADE "1" 
    PROTON_FSR4_UPGRADE "1"
    PROTON_USE_NTSYNC "1"
    QT_CURSOR_SIZE "24"
    QT_QPA_PLATFORM "wayland;xcb"
    QT_STYLE_OVERRIDE "kvantum"
    SDL_VIDEODRIVER "wayland"
    WINE_NO_WM_DECORATION "1"
    XCURSOR_SIZE "24"
}

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        repeat-delay 300
        repeat-rate 65
        xkb {
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    // focus-follows-mouse max-scroll-amount="0%"
    // focus-follows-mouse 
}

cursor {
    xcursor-theme "Bibata-Original-Classic"
    hide-after-inactive-ms 3000
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "DP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.

    mode "2560x1440@280.001"
    // variable-refresh-rate 
    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 1 

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1440 y=484
    focus-at-startup
    background-color "#2E3440"
    backdrop-color "#2E3440"
}

output "DP-2" {
    mode "2560x1440@239.992"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 1 
    transform "270"
    position x=0 y=0
    background-color "#2E3440"
    backdrop-color "#2E3440"
}

overview {
  zoom 0.75
  workspace-shadow {
  }
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 8 

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        proportion 0.33333333
        proportion 0.5
        proportion 0.6666667
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    preset-window-heights { 
        proportion 0.5
        proportion 0.75
        proportion 1.0
  }

    // You can change the default width of the new windows.
    // default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    default-column-width { proportion 0.3333333; }

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off

        // How many logical pixels the ring extends out from the windows.
        width 1

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#7fc8ff"
        // Color of the ring on inactive monitors.
        inactive-color "#505050"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 1
        active-color "#6495ed"
        inactive-color "#808080"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        // 
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        // 
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
// spawn-at-startup "alacritty" "-e" "fish"

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0    

    workspace-switch {
        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    config-notification-open-close {
        // off
        // duration-ms 250
        // curve "ease-out-cubic"
        // spring damping-ratio=0.1 stiffness=1000 epsilon=0.001
    }
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules
workspace "browser" {
  open-on-output "DP-2"
}

workspace "steam" {
  open-on-output "DP-1"
}

window-rule {
    focus-ring { }

    border {}
    // geometry-corner-radius 6
    clip-to-geometry true
}

window-rule {
  match at-startup=true app-id=r#"(Brave-browser|zen)"#
  open-on-output "DP-2"
}

window-rule {
  match app-id=r#"(Brave-browser|zen)"#
  default-column-width { proportion 1.0; }
  open-on-output "DP-2"
}

window-rule {
  match at-startup=true app-id=r#"com.mitchellh.ghostty"#
  open-on-output "DP-1"
}

window-rule {
  match app-id=r#"discord"#
  default-column-width { proportion 1.0; }
  open-on-output "DP-2"
}

window-rule {
  match app-id=r#"RimWorld*"#
  open-on-output "DP-1"
  open-maximized true
}

window-rule {
  match app-id=r#"steam"# title="Steam"
  open-on-output "DP-1"
  default-column-width {proportion 0.66666667;}
  default-floating-position x=100 y=100 relative-to="top-left"
  open-focused false
}

window-rule {
  match app-id=r#"steam"# title="Steam Settings"
  open-on-output "DP-1"
}

window-rule {
  match app-id=r#"steam"# title="Friends List"
  open-on-output "DP-1"
  default-column-width {proportion 0.25;}
  default-floating-position x=100 y=100 relative-to="top-right"
  open-focused false
}

window-rule {
    match app-id="steam" title=r#"^notificationtoasts_\d+_desktop$"#
    default-floating-position x=10 y=50 relative-to="bottom-right"
}

// Floating apps
window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    match app-id=r#"blueberry.py$"# 
    match app-id=r#".*pavucontrol.*$"#

    open-floating true
}

// Floating password manager windows but keep them out of screenshare
window-rule {
    match app-id=r#"^org\.gnome\.World\.Secrets$"#
    match app-id=r#"^.*assword.*$"#
    open-floating true

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Indicate screencasted windows with red colors.
window-rule {
    match is-window-cast-target=true

    focus-ring {
        active-color "#81A1C1"
        inactive-color "#4C566A"
    }

    border {
        inactive-color "#4C566A"
    }

    shadow {
        color "#7d0d2d70"
    }

    tab-indicator {
        active-color "#81A1C1"
        inactive-color "#4C566A"
    }
}

// Steam games
window-rule {
  match app-id=r#"steam_app_\d+$"#
  open-on-output "DP-1"
    // open-maximized true
  default-column-width { proportion 1.0; }
  open-fullscreen true
}

window-rule {
  match app-id=r#"steam_app_\d+$"# title=r#"Battle.net$"#
  open-floating true
}

// window-rule {
//   match app-id="exiled-exchange-2"
//   open-on-output "DP-1"
//   open-floating true
//   open-focused false
//   focus-ring {
//     off
//   }
//   border {
//     off
//   }
// }


binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    Mod+Shift+Slash         { show-hotkey-overlay; }
    Mod+Shift+O             { toggle-overview;}

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+Return repeat=false { spawn "ghostty"; }
    Mod+D                   { spawn "fuzzel"; }
    Mod+Alt+L             { spawn "swaylock -f -c 000000"; }
    Mod+M                   { spawn "ghostty" "-e" "spotify_player"; }
    // Mod+S                   { spawn-sh "grim -g \"$(slurp)\" - | swappy -f -";}
    Mod+S                   { screenshot; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    Mod+Q { close-window; }

    Mod+H                 { focus-column-left; }
    Mod+J                 { focus-window-down; }
    Mod+K                 { focus-window-up; }
    Mod+L                 { focus-column-right; }
    Mod+Shift+H           { move-column-left; }
    Mod+Shift+J           { move-window-down; }
    Mod+Shift+K           { move-window-up; }
    Mod+Shift+L           { move-column-right; }

    Mod+A                 { focus-column-first; }
    Mod+Z                 { focus-column-last; }
    Mod+Shift+A           { move-column-to-first; }
    Mod+Shift+Z           { move-column-to-last; }

    Mod+Ctrl+H            { focus-monitor-left; }
    Mod+Ctrl+J            { focus-monitor-down; }
    Mod+Ctrl+K            { focus-monitor-up; }
    Mod+Ctrl+L            { focus-monitor-right; }

    Mod+Shift+Ctrl+H      { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J      { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K      { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L      { move-column-to-monitor-right; }


    Mod+U                 { focus-workspace-down; }
    Mod+I                 { focus-workspace-up; }
    Mod+Shift+U           { move-column-to-workspace-down; }
    Mod+Shift+I           { move-column-to-workspace-up; }

    // Mod+Ctrl+U           { move-workspace-down; }
    // Mod+Ctrl+I           { move-workspace-up; }


    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }


    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+y  { consume-or-expel-window-left; }
    Mod+o { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }

    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Shift+Ctrl+F {toggle-windowed-fullscreen;}

    // Expand the focused column to space not taken up by other fully visible columns.
    // Makes the column "fill the rest of the space".
    Mod+Ctrl+F { expand-column-to-available-width; }
    Mod+C { center-column; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    Mod+Ctrl+Minus { set-column-width "-1"; }
    Mod+Ctrl+Equal { set-column-width "+1"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.
    Mod+W { toggle-column-tabbed-display; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Mod+F11 { screenshot; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}
